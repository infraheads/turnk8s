name: 'Run Clusters'

on:
  push:
    branches-ignore:
      - 'main'
    paths:
      - '.github/configs/test_config.yaml'
      
env:
  TF_CLOUD_ORGANIZATION: "infraheads"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_VAR_proxmox_token_id: "${{ secrets.PROXMOX_TOKEN_ID }}"
  TF_VAR_proxmox_token_secret: "${{ secrets.PROXMOX_TOKEN_SECRET }}"
  TF_VAR_github_token: "${{ secrets.TOKEN_GITHUB }}"
  TF_VAR_netris_controller_host: "${{ vars.NETRIS_CONTROLLER_HOST }}"
  TF_VAR_netris_controller_login: "${{ secrets.NETRIS_CONTROLLER_LOGIN }}"
  TF_VAR_netris_controller_password: "${{ secrets.NETRIS_CONTROLLER_PASSWORD }}"
  TF_VAR_argocd_admin_password: "${{ secrets.ARGOCD_ADMIN_PASSWORD }}"
  TF_VAR_config_file_path: "../../.github/configs/test_config.yaml"
  POSTFIX: "pr"
  INFRASTRUCTURE_WORKSPACE_POSTFIX: "infrastructure-pr"
  CLUSTER_WORKSPACE_POSTFIX: "cluster-pr"

jobs:
  setup_terraform:
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "terraform/infrastructure"
    outputs:
      clusters: ${{ steps.output_variables.outputs.clusters }}
      removable_workspaces: ${{ steps.output_variables.outputs.removable_workspaces }}
    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform Environment
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.7.5

    - name: Configure Terraform Cache
      run: |
        echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> "$GITHUB_ENV"

    - name: Initializing Terraform
      id: init
      run: terraform init -upgrade
      env:
        TF_WORKSPACE: "default-ws"

    - name: Extract values and set output variables
      id: output_variables
      run: |
        clusters=$(yq e 'keys | .[]' ${GITHUB_WORKSPACE}/config.yaml | jq -R -s -c 'split("\n")[:-1]')
        workspaces=$(terraform workspace list | grep '\(-${env.INFRASTRUCTURE_WORKSPACE_POSTFIX}\|-${env.CLUSTER_WORKSPACE_POSTFIX}\)$' | sed 's/-${env.INFRASTRUCTURE_WORKSPACE_POSTFIX}$//;s/-${env.CLUSTER_WORKSPACE_POSTFIX}$//' | uniq -d | grep -v '^$' | jq -R -s -c 'split("\n")[:-1] | map(ltrimstr("  "))')
        echo "removable_workspaces=$(jq -n -c $workspaces-$clusters)" >> $GITHUB_OUTPUT
        echo "clusters=$clusters" >> $GITHUB_OUTPUT

    - name: Echo Outputs
      run: |
        echo ${{ steps.output_variables.outputs.clusters }}
        echo ${{ steps.output_variables.outputs.removable_workspaces }}

  destroy_cluster:
    needs: setup_terraform
    if: ${{ needs.setup_terraform.outputs.removable_workspaces != '[]' }}
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "terraform/infrastructure"
    strategy:
      matrix:
        destroyable_resources: ${{ fromJSON(needs.setup_terraform.outputs.removable_workspaces) }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.7.5

      - name: Configure Terraform Cache
        run: echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> "$GITHUB_ENV"

      - name: Initializing Terraform
        run: terraform init
        env:
          TF_WORKSPACE: "default-ws"
          TF_VAR_cluster_name: ${{ matrix.destroyable_resources }}
          TF_VAR_secondary_cluster_name: "${{ matrix.destroyable_resources }}-${{ env.POSTFIX }}"

      - name: Selecting Terraform Workspace
        run: terraform workspace select ${{ matrix.destroyable_resources }}-${{ env.INFRASTRUCTURE_WORKSPACE_POSTFIX }}

      - name: Destroying Terraform
        run: |
          terraform destroy -auto-approve

      - name: Destroying Terraform Cloud Workspace
        run: |
          terraform workspace select default-ws
          terraform workspace delete -force ${{ matrix.destroyable_resources }}-${{ env.INFRASTRUCTURE_WORKSPACE_POSTFIX }}
          terraform workspace delete -force ${{ matrix.destroyable_resources }}-${{ env.CLUSTER_WORKSPACE_POSTFIX }}

      - name: Remove kubeconfig
        run: rm /opt/kubeconfig/${{ matrix.destroyable_resources }}-${{ env.POSTFIX }}

  apply_cluster:
    needs: setup_terraform
    if: ${{ needs.setup_terraform.outputs.clusters != '[]' }}
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "terraform"
    strategy:
      matrix:
        cluster: ${{ fromJSON(needs.setup_terraform.outputs.clusters) }}
    steps:
    - name: Infrastructure updates
      uses: ./.github/actions/apply_terraform_composite_action
      with:
        workspace: "${{ matrix.cluster }}-${{ env.INFRASTRUCTURE_WORKSPACE_POSTFIX }}"
        plan_output: tfplan-${{ matrix.cluster }}-${{ env.INFRASTRUCTURE_WORKSPACE_POSTFIX }}
        working_directory: "terraform/infrastructure"
        tf_api_token: ${{ secrets.TF_API_TOKEN }}
      env:
        TF_VAR_cluster_name: ${{ matrix.cluster }}
        TF_VAR_secondary_cluster_name: "${{ matrix.cluster }}-${{ env.POSTFIX }}"

    - name: Cluster updates
      uses: ./.github/actions/apply_terraform_composite_action
      with:
        workspace: "${{ matrix.cluster }}-${{ env.CLUSTER_WORKSPACE_POSTFIX }}"
        plan_output: tfplan-${{ matrix.cluster }}-${{ env.CLUSTER_WORKSPACE_POSTFIX }}
        working_directory: "terraform/cluster"
        tf_api_token: ${{ secrets.TF_API_TOKEN }}
      env:
        TF_VAR_cluster_name: ${{ matrix.cluster }}
        TF_VAR_infrastructure_workspace: "${{ matrix.cluster }}-${{ env.INFRASTRUCTURE_WORKSPACE_POSTFIX }}"

    - name: Generating kube-config
      uses: actions/upload-artifact@v4
      with:
        name: kube-config-${{ matrix.cluster }}-${{ env.POSTFIX }}
        path: /opt/kubeconfig/${{ matrix.cluster }}-${{ env.POSTFIX }}
        compression-level: 0

    - name: Generateing Markdown
      run: |
        echo "### turnk8s" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Push your Kubernetes service manifests to [GitHub URL](https://github.com/infraheads/${{ matrix.cluster }}-${{ env.POSTFIX }}) to get them deployed on the cluster. :star_struck:" >> $GITHUB_STEP_SUMMARY
        echo "Use `kubeconfig` file(s) to connect to the cluster, see the link above :point_up:" >> $GITHUB_STEP_SUMMARY