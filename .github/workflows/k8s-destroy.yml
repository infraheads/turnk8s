name: Destroy Kubernetes Cluster

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'Kubernetes Cluster Name'
        required: true

env:
  TF_CLOUD_ORGANIZATION: "infraheads"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"

jobs:
  destroy-resources:
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "terraform"
    env:
      TF_VAR_proxmox_ip: "${{ secrets.PROXMOX_IP }}"
      TF_VAR_proxmox_token_id: "${{ secrets.PROXMOX_TOKEN_ID }}"
      TF_VAR_proxmox_token_secret: "${{ secrets.PROXMOX_TOKEN_SECRET }}"
      TF_VAR_cluster_name: "${{ inputs.cluster_name }}"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.7.5

      - name: Configure Terraform Cache
        run: echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> "$GITHUB_ENV"

      - name: Initializing Terraform
        run: terraform init
        env:
          TF_WORKSPACE: "default-ws"
          
      - name: Selecting Terraform Workspace
        run: |
          set +e
          terraform workspace select ${{ inputs.cluster_name }}
          tf_exitcode=$?
          set -e
          if [ $tf_exitcode -ne 0 ]; 
          then
              echo """
              Error: Cluster or Workspace does not exist.
              Message: There is no Kubernetes cluster or Terraform workspace with the name '${{ inputs.cluster_name }}'.
              """
              exit 1
          fi

      - name: Destroying Terraform  
        run: |
          terraform destroy -auto-approve

      - name: Destroying Terraform Cloud Workspace
        run: |
          terraform workspace select default-ws
          terraform workspace delete -force ${{ inputs.cluster_name }}