name: 'Apply Terraform'

on:
  push:
    branches:
      - 'multiple-cluster'
    paths:
      - 'inputs.yaml'
      
env:
  TF_CLOUD_ORGANIZATION: "infraheads"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_VAR_proxmox_token_id: "${{ secrets.PROXMOX_TOKEN_ID }}"
  TF_VAR_proxmox_token_secret: "${{ secrets.PROXMOX_TOKEN_SECRET }}"
  TF_VAR_github_token: "${{ secrets.TOKEN_GITHUB }}"
  TF_VAR_netris_controller_host: "${{ vars.NETRIS_CONTROLLER_HOST }}"
  TF_VAR_netris_controller_login: "${{ secrets.NETRIS_CONTROLLER_LOGIN }}"
  TF_VAR_netris_controller_password: "${{ secrets.NETRIS_CONTROLLER_PASSWORD }}"
  TF_VAR_argocd_admin_password: "${{ secrets.ARGOCD_ADMIN_PASSWORD }}"

jobs:
  setup_terraform:
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "terraform"
    steps:
    - uses: actions/checkout@v4
  
    - name: Extract values and set environment variables
      uses: mikefarah/yq@master
      with:
        cmd: echo "WORKSPACES=$(yq e '.[].cluster_name' inputs.yaml)" >> $GITHUB_ENV

    - uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.7.5

    - name: Configure Terraform Cache
      run: echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> "$GITHUB_ENV"

    - name: Initializing Terraform
      id: init
      run: terraform init -upgrade
      env:
        TF_WORKSPACE: "default-ws"

  run_terraform:
    needs: setup_terraform
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "terraform"
    strategy:
      matrix:
        workspaces: [${{ env.WORKSPACES }}]
    steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.7.5

    - name: Selecting Terraform Workspace
      id: workspace
      run: terraform workspace select -or-create ${{ matrix.workspaces }}

    - name: Validating Terraform
      id: validate
      run: terraform validate -no-color

    - name: Planning Terraform
      id: plan
      run: terraform plan -out=tfplan

    - name: Applying Terraform
      id: apply
      run: |
        set +e
        terraform apply tfplan
        tf_exitcode=$?
        set -e
        if [ $tf_exitcode -ne 0 ];
        then
        echo """
          Error: Unable to create a Cluster.
          Message: This could be caused by a lack of resources in the server. Please review the server resources and try again.
          """
        exit 1
        fi

#    - name: Generating kube-config
#      uses: actions/upload-artifact@v4
#      with:
#        name: kube-config
#        path: /tmp/kube-config
#        compression-level: 0