name: 'Run Clusters'

on:
  pull_request:
    paths:
      - 'config.yaml'
    branches:
      - '*'

env:
  TF_CLOUD_ORGANIZATION: "infraheads"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_VAR_proxmox_token_id: "${{ secrets.PROXMOX_TOKEN_ID }}"
  TF_VAR_proxmox_token_secret: "${{ secrets.PROXMOX_TOKEN_SECRET }}"
  TF_VAR_github_token: "${{ secrets.TOKEN_GITHUB }}"
  TF_VAR_netris_controller_host: "${{ vars.NETRIS_CONTROLLER_HOST }}"
  TF_VAR_netris_controller_login: "${{ secrets.NETRIS_CONTROLLER_LOGIN }}"
  TF_VAR_netris_controller_password: "${{ secrets.NETRIS_CONTROLLER_PASSWORD }}"
  TF_VAR_argocd_admin_password: "${{ secrets.ARGOCD_ADMIN_PASSWORD }}"
  TF_VAR_cluster_name: "turnk8s-${{ github.event.number }}"

jobs:
  setup_cluster:
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "terraform/infrastructure"
    outputs:
      clusters: ${{ steps.output_variables.outputs.clusters }}
    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform Environment
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.7.5

    - name: Configure Terraform Cache
      run: |
        echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> "$GITHUB_ENV"

    - name: Initializing Terraform
      id: init
      run: terraform init -upgrade
      env:
        TF_WORKSPACE: "default-ws"

    - name: Extract values and set output variables
      id: output_variables
      run: |
        if [[ ${{ github.event.pull_request.draft }} == true ]];
        then
          echo "clusters=$(yq e 'keys | .[]' ${GITHUB_WORKSPACE}/config.yaml | grep ${{ env.TF_VAR_cluster_name }}')" >> $GITHUB_OUTPUT
        else
          echo "clusters=$(yq e 'keys | .[]' ${GITHUB_WORKSPACE}/config.yaml | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
        fi

  update_cluster:
    needs: setup_cluster
    if: ${{ needs.setup_terraform.outputs.clusters != '[]' && github.event.pull_request.draft == true }}
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "terraform"
    steps:
    - name: Infrastructure updates
      uses: ./.github/actions/apply_terraform_composite_action
      with:
        workspace: ${{ env.TF_VAR_cluster_name }}-infrastructure
        plan_output: tfplan-${{ env.TF_VAR_cluster_name }}-infrastructure
        working_directory: "terraform/infrastructure"
        tf_api_token: ${{ secrets.TF_API_TOKEN }}

    - name: Cluster updates
      uses: ./.github/actions/apply_terraform_composite_action
      with:
        workspace: ${{ env.TF_VAR_cluster_name }}-cluster
        plan_output: tfplan-${{ env.TF_VAR_cluster_name }}-cluster
        working_directory: "terraform/cluster"
        tf_api_token: ${{ secrets.TF_API_TOKEN }}

    - name: Generating kube-config
      uses: actions/upload-artifact@v4
      with:
        name: kube-config-${{ env.TF_VAR_cluster_name }}
        path: /opt/kubeconfig/${{ env.TF_VAR_cluster_name }}
        compression-level: 0

    - name: Generating Markdown
      run: |
        echo "### turnk8s" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Push your Kubernetes service manifests to [GitHub URL](https://github.com/infraheads/${{ env.TF_VAR_cluster_name }}) to get them deployed on the cluster. :star_struck:" >> $GITHUB_STEP_SUMMARY
        echo "Use `kubeconfig` file(s) to connect to the cluster, see the link above :point_up:" >> $GITHUB_STEP_SUMMARY

  rollback_cluster:
    needs: update_cluster
    if: ${{ failure() }}
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: "terraform/infrastructure"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.7.5

      - name: Configure Terraform Cache
        run: echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >> "$GITHUB_ENV"

      - name: Initializing Terraform
        run: terraform init
        env:
          TF_WORKSPACE: "default-ws"

      - name: Selecting Terraform Workspace
        run: terraform workspace select ${{ env.TF_VAR_cluster_name }}-infrastructure

      - name: Destroying Terraform
        run: |
          terraform destroy -auto-approve

      - name: Destroying Terraform Cloud Workspace
        run: |
          terraform workspace select default-ws
          terraform workspace delete -force ${{ env.TF_VAR_cluster_name }}-infrastructure
          terraform workspace delete -force ${{ env.TF_VAR_cluster_name }}-cluster

      - name: Remove kubeconfig
        run: rm /opt/kubeconfig/${{ env.TF_VAR_cluster_name }}

  ready_to_merge:
    needs: setup_cluster
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Block PR merge if no cluster names
      run: |
        if [[ ${{ needs.setup_terraform.outputs.clusters == '[]' ]];
        then
          if [[ ${{ github.event.pull_request.draft == true }} ]];
          then
            echo "There is no cluster with name ${{ env.TF_VAR_cluster_name }}."
            exit 1
          else
            echo "No new cluster names found for creation."
            exit 1
          fi
        fi